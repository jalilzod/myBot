# === Part 1: imports, env, clients, i18n, base state ===
import os
import re
import math
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from dotenv import load_dotenv
from supabase import create_client

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_SERVICE_ROLE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY")  # required

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is missing in .env")
if not SUPABASE_URL:
    raise RuntimeError("SUPABASE_URL is missing in .env")
if not SUPABASE_SERVICE_ROLE_KEY:
    raise RuntimeError("SUPABASE_SERVICE_ROLE_KEY is missing in .env (needed for all DB access)")

# Admin IDs (comma-separated numeric IDs in .env)
ADMIN_IDS = set(
    int(x.strip()) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip().isdigit()
)

# Telegram bot
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Single Supabase client with service role key for ALL operations
supabase = create_client(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY)
supabase_admin = supabase  # alias for clarity if needed

# ===== i18n (translations) =====
LANG = {
    "ru": {
        "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Yasroikard Logistic!",
        "menu_title": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        "btn_channels": "üõç –ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã",
        "btn_track": "üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ",
        "btn_calc": "üì¶ –†–∞—Å—á—ë—Ç –æ–±—ä—ë–º–∞",
        "btn_eta": "üöö –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏",
        "btn_about": "‚ÑπÔ∏è –û –Ω–∞—Å",
        "btn_contact": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
        "btn_lang": "üåê –Ø–∑—ã–∫",
        "btn_admin": "üõ† –ê–¥–º–∏–Ω",
        "btn_back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        "btn_by_code": "üî¢ –ü–æ —Ç—Ä–µ–∫-–∫–æ–¥—É",
        "btn_by_phone": "üìû –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
        "btn_calc_again": "üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç",
        "btn_menu_back": "‚¨ÖÔ∏è –í –º–µ–Ω—é",

        "lang_pick": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "lang_saved": "–Ø–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {lang_name}",
        "channels_title": "–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã:",
        "track_how": "–ö–∞–∫ –∏—Å–∫–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?",
        "track_enter_code": "–í–≤–µ–¥–∏—Ç–µ *—Ç—Ä–µ–∫-–∫–æ–¥* (–Ω–∞–ø—Ä–∏–º–µ—Ä, YA123456789):",
        "track_enter_phone": "–í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* (–Ω–∞–ø—Ä–∏–º–µ—Ä, +992XXXXXXXXX):",
        "search_none": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "search_again": "–ï—â—ë –ø–æ–∏—Å–∫? –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:",

        # Office address + about
        "about_text": (
            "üåè **–û –Ω–∞—Å ‚Äî Yasroikard Logistic**\n\n"
            "üè¢ **–ê–¥—Ä–µ—Å –æ—Ñ–∏—Å–∞:**\n"
            "–ö–∏—Ç–∞–π, –ø—Ä–æ–≤–∏–Ω—Ü–∏—è –ß–∂—ç—Ü–∑—è–Ω, –≥–æ—Ä–æ–¥ –ò—É,\n"
            "—É–ª–∏—Ü–∞ –¶–∑—è–Ω–¥—É–Ω, —Ä–∞–π–æ–Ω –£–∞–π –°–∏–Ω—å –¶—É–Ω—å,\n"
            "–¥. 44 / –±–ª–æ–∫ 1, –æ—Ñ–∏—Å B301\n\n"
            "üë§ **–ê–¥–º–∏–Ω—ã:** Yasroikard –∏ –î–∂–∞–ª–∏–ª–æ–≤ –ö–∏—ë–º–∏–¥–¥–∏–Ω\n\n"
            "üíº **–ö—Ç–æ –º—ã:** –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±–∞–π–µ—Ä—ã –≤ –ö–∏—Ç–∞–µ. –ü–æ–º–æ–∂–µ–º –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å –≤–∞—Å –∫–∞–∫ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏ ‚Äî –±—ã—Å—Ç—Ä–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.\n\n"
            "üõí **–ß—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:**\n"
            "‚Ä¢ –ó–∞–∫—É–ø–∫–∏ –¥–ª—è Wildberries, Ozon –∏ –¥—Ä. –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω–æ–≤\n"
            "‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è –≤—Å–µ–≥–æ 5%\n"
            "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–¥–µ–ª–∫–∏ –æ—Ç –ø–æ–∏—Å–∫–∞ –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏\n\n"
            "üö¢ **–î–æ—Å—Ç–∞–≤–∫–∞:**\n"
            "‚Ä¢ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω: 18‚Äì26 –¥–Ω–µ–π\n"
            "‚Ä¢ –†–æ—Å—Å–∏—è: 13‚Äì18 –¥–Ω–µ–π\n"
            "‚Ä¢ –ï–≤—Ä–æ–ø–∞ –∏ –°–®–ê: —É—Ç–æ—á–Ω—è–π—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "üí∞ **–¢–∞—Ä–∏—Ñ—ã:** –æ—Ç 0,5 $/–∫–≥ –∏ –æ—Ç 190 $/–º¬≥\n\n"
            "üåç –ö–ª–∏–µ–Ω—Ç—ã –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É: –ê–∑–∏—è, –ï–≤—Ä–æ–ø–∞, –°–®–ê, –∞—Ä–∞–±—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω—ã, –ê—Ñ—Ä–∏–∫–∞.\n\n"
            "‚ú® –í—ã–±–∏—Ä–∞–π—Ç–µ –Ω–∞—Å –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤—É!"
        ),
        "delivery_text": (
            "üöö *–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏*\n\n"
            "üìç *–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω:* 18‚Äì26 –¥–Ω–µ–π\n"
            "üìç *–†–æ—Å—Å–∏—è:* 13‚Äì18 –¥–Ω–µ–π\n"
            "üìç *–ï–≤—Ä–æ–ø–∞ –∏ –°–®–ê:* —É—Ç–æ—á–Ω—è–π—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "üè¢ *–ù–∞—à –∞–¥—Ä–µ—Å:*\n"
            "–ö–∏—Ç–∞–π, –ø—Ä–æ–≤–∏–Ω—Ü–∏—è –ß–∂—ç—Ü–∑—è–Ω, –≥\\. –ò—É,\n"
            "—É–ª –¶–∑—è–Ω–î—É–Ω, —Ä-–Ω –£–ê–π –°–∏–Ω—å –¶—É–Ω—å,\n"
            "–¥ 44  –±–ª–æ–∫ 1, –æ—Ñ–∏—Å B301\n\n"
            "üí¨ –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º: @mg19981 –∏–ª–∏ @Yasin\\_direct"
        ),

        "contact_text": (
            "üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã**\n\n"
            "–ê–¥–º–∏–Ω—ã: @mg19981 ‚Ä¢ @Yasin\\_direct\n\n"
            "üè¢ **–ê–¥—Ä–µ—Å –æ—Ñ–∏—Å–∞:**\n"
            "–ö–∏—Ç–∞–π, –ø—Ä–æ–≤–∏–Ω—Ü–∏—è –ß–∂—ç—Ü–∑—è–Ω, –≥–æ—Ä–æ–¥ –ò—É,\n"
            "—É–ª–∏—Ü–∞ –¶–∑—è–Ω–¥—É–Ω, —Ä–∞–π–æ–Ω –£–∞–π –°–∏–Ω—å –¶—É–Ω—å,\n"
            "–¥ 44  –±–ª–æ–∫ 1, –æ—Ñ–∏—Å B301"
        ),

                # inside LANG["ru"]
        "btn_warehouse": "üè≠ –ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤",

        "warehouse_title_multi": "üè≠ –ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤",
        "warehouse_tj_label": "–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω",
        "warehouse_ru_label": "–†–æ—Å—Å–∏—è",

        "warehouse_tj_address": (
            "Êî∂Ë¥ß‰∫∫ÔºöYASCARGO\n"
            "ÁîµËØùÔºö13661799136\n"
            "ËØ¶ÁªÜÂú∞ÂùÄÔºöÊµôÊ±üÁúÅ ÈáëÂçéÂ∏Ç ‰πâ‰πåÂ∏ÇÁ¶èÁî∞Áâ©ÊµÅÂõ≠A8-165Âè∑ (–Ω–æ–º–µ—Ä–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ —Ö–¥—Ç–æ–Ω)"
        ),
        "warehouse_ru_address": (
            "Êî∂Ë¥ß‰∫∫ÔºöM9613-—á–æ—Ä —Ä–∞–∫–∞–º–∏ –æ—Ö–∏—Ä–∏ –Ω–æ–º–µ—Ä\n"
            "ÁîµËØùÔºö15734838888\n"
            "ËØ¶ÁªÜÂú∞ÂùÄÔºöÊµôÊ±üÁúÅÈáëÂçéÂ∏Ç‰πâ‰πåÂ∏Ç Á¶èÁî∞Â∑•‰∏öÂå∫Ê∂åÈáëÂ§ßÈÅìB9Âè∑Èô¢ÂÜÖ9399Â∫ìÊàøM9613-—á–æ—Ä —Ä–∞–∫–∞–º–∏ –æ—Ö–∏—Ä–∏ –Ω–æ–º–µ—Ä"
        ),

        # one message, two code blocks for easy copy
        "warehouse_text_multi": (
            "*{title}*\n\n"
            "üì¶ *{tj_label}*\n"
            "```\n{tj_addr}\n```\n"
            "üì¶ *{ru_label}*\n"
            "```\n{ru_addr}\n```\n"
            "üìå –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–π –∞–¥—Ä–µ—Å."
        ),



        # Calculator i18n
        "calc_intro": "üì¶ –†–∞—Å—á—ë—Ç –æ–±—ä—ë–º–∞ (–º¬≥).\n–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è:",
        "calc_enter_h_m": "–í–≤–µ–¥–∏—Ç–µ *–≤—ã—Å–æ—Ç—É* –≤ –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.2):",
        "calc_enter_h_cm": "–í–≤–µ–¥–∏—Ç–µ *–≤—ã—Å–æ—Ç—É* –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 120):",
        "calc_enter_w_unit": "–û–∫. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *—à–∏—Ä–∏–Ω—É* –≤ {unit_phrase}:",
        "calc_enter_l_unit": "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–¥–ª–∏–Ω—É* –≤ {unit_phrase}:",
        "calc_invalid_value_unit": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ {dimension} –≤ {unit}.",
        "calc_result": "üì¶ –û–±—ä—ë–º: *{volume:.3f} –º¬≥*",
        "unit_phrase_m": "–º–µ—Ç—Ä–∞—Ö",
        "unit_phrase_cm": "—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö",
        "unit_m": "–º",
        "unit_cm": "—Å–º",
        "dim_height": "–≤—ã—Å–æ—Ç—É",
        "dim_width": "—à–∏—Ä–∏–Ω—É",
        "dim_length": "–¥–ª–∏–Ω—É",
    },
    "en": {
        "welcome": "Welcome to Yasroikard Logistic!",
        "menu_title": "Main menu:",
        "btn_channels": "üõç Our channels",
        "btn_track": "üîç Tracking",
        "btn_calc": "üì¶ Volume calculator",
        "btn_eta": "üöö Delivery time",
        "btn_about": "‚ÑπÔ∏è About us",
        "btn_contact": "üìû Contacts",
        "btn_lang": "üåê Language",
        "btn_admin": "üõ† Admin",
        "btn_back": "‚¨ÖÔ∏è Back",
        "btn_by_code": "üî¢ By tracking code",
        "btn_by_phone": "üìû By phone",
        "btn_calc_again": "üîÅ New calculation",
        "btn_menu_back": "‚¨ÖÔ∏è Main menu",

        "lang_pick": "Choose your language:",
        "lang_saved": "Language saved: {lang_name}",
        "channels_title": "Our channels:",
        "track_how": "How would you like to search?",
        "track_enter_code": "Enter *tracking code* (e.g., YA123456789):",
        "track_enter_phone": "Enter *phone number* (e.g., +1XXXXXXXXXX):",
        "search_none": "No results. Please check and try again.",
        "search_again": "Search again? Choose a method:",

        "about_text": (
            "üåè **About Yasroikard Logistic**\n\n"
            "üè¢ **Office address:**\n"
            "Yiwu City, Jiangdong Street, W√†i Xƒ´n C≈´n area,\n"
            "Building 44 / Block 1, Office B301, Zhejiang, China\n\n"
            "üë§ **Admins:** Yasroikard and Jalilov Kiyomidin\n\n"
            "üíº **Who we are:** Professional buyers in China. We help you find products, inspect quality, and act as interpreters ‚Äî fast, safe, and efficient.\n\n"
            "üõí **What we offer:**\n"
            "‚Ä¢ Purchasing for Wildberries, Ozon and more (online/offline)\n"
            "‚Ä¢ Commission only 5%\n"
            "‚Ä¢ Deal control from sourcing to delivery\n\n"
            "üö¢ **Delivery:**\n"
            "‚Ä¢ Tajikistan: 18‚Äì26 days\n"
            "‚Ä¢ Russia: 13‚Äì18 days\n"
            "‚Ä¢ Europe & USA: ask the admin\n\n"
            "üí∞ **Rates:** from $0.5/kg and from $190/m¬≥\n\n"
            "üåç Clients worldwide: Asia, Europe, USA, Arab countries, Africa.\n\n"
            "‚ú® Choose us and start your business journey!"
        ),

        # Warehouse (EN)
        "btn_warehouse": "üè≠ Warehouse addresses",

        "warehouse_title_multi": "üè≠ Warehouse addresses",
        "warehouse_tj_label": "Tajikistan",
        "warehouse_ru_label": "Russia",

        "warehouse_tj_address": (
            "Êî∂Ë¥ß‰∫∫ÔºöYASCARGO\n"
            "ÁîµËØùÔºö13661799136\n"
            "ËØ¶ÁªÜÂú∞ÂùÄÔºöÊµôÊ±üÁúÅ ÈáëÂçéÂ∏Ç ‰πâ‰πåÂ∏ÇÁ¶èÁî∞Áâ©ÊµÅÂõ≠A8-165Âè∑ (–Ω–æ–º–µ—Ä–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ —Ö–¥—Ç–æ–Ω)"
        ),
        "warehouse_ru_address": (
            "Êî∂Ë¥ß‰∫∫ÔºöM9613-—á–æ—Ä —Ä–∞–∫–∞–º–∏ –æ—Ö–∏—Ä–∏ –Ω–æ–º–µ—Ä\n"
            "ÁîµËØùÔºö15734838888\n"
            "ËØ¶ÁªÜÂú∞ÂùÄÔºöÊµôÊ±üÁúÅÈáëÂçéÂ∏Ç‰πâ‰πåÂ∏Ç Á¶èÁî∞Â∑•‰∏öÂå∫Ê∂åÈáëÂ§ßÈÅìB9Âè∑Èô¢ÂÜÖ9399Â∫ìÊàøM9613-—á–æ—Ä —Ä–∞–∫–∞–º–∏ –æ—Ö–∏—Ä–∏ –Ω–æ–º–µ—Ä"
        ),

        "warehouse_text_multi": (
            "*{title}*\n\n"
            "üì¶ *{tj_label}*\n"
            "```\n{tj_addr}\n```\n"
            "üì¶ *{ru_label}*\n"
            "```\n{ru_addr}\n```\n"
            "üìå Copy the address you need."
        ),


        "delivery_text": (
            "üöö *Delivery times*\n\n"
            "üìç *Tajikistan:* 18‚Äì26 days\n"
            "üìç *Russia:* 13‚Äì18 days\n"
            "üìç *Europe & USA:* check with admin\n\n"
            "üè¢ *Our address:*\n"
            "China, Zhejiang Province, Yiwu City,\n"
            "JiangDong Street, WuAi XinCun District,\n"
            "No 44  Block 1, Office B301\n\n"
            "üí¨ For other countries contact admin: @mg19981 or @Yasin\\_direct"
        ),

        "contact_text": (
            "üìû **Contacts**\n\n"
            "Admins: @mg19981 ‚Ä¢ @Yasin\\_direct\n\n"
            "üè¢ **Office address:**\n"
            "Yiwu City, Jiangdong Street, W√†i Xƒ´n C≈´n area,\n"
            "Building 44  Block 1, Office B301, Zhejiang, China"
        ),

        "calc_intro": "üì¶ Volume calculator (m¬≥).\nFirst, choose the units:",
        "calc_enter_h_m": "Enter *height* in meters (e.g., 1.2):",
        "calc_enter_h_cm": "Enter *height* in centimeters (e.g., 120):",
        "calc_enter_w_unit": "Great. Now enter *width* in {unit_phrase}:",
        "calc_enter_l_unit": "Perfect. Finally enter *length* in {unit_phrase}:",
        "calc_invalid_value_unit": "Invalid value. Please enter {dimension} in {unit}.",
        "calc_result": "üì¶ Volume: *{volume:.3f} m¬≥*",
        "unit_phrase_m": "meters",
        "unit_phrase_cm": "centimeters",
        "unit_m": "m",
        "unit_cm": "cm",
        "dim_height": "height",
        "dim_width": "width",
        "dim_length": "length",
    },
    "tj": {
        "welcome": "–•—É—à –æ–º–∞–¥–µ–¥ –±–∞ Yasroikard Logistic!",
        "menu_title": "–ú–µ–Ω—é–∏ –∞—Å–æ—Å”£:",
        "btn_channels": "üõç –ö–∞–Ω–∞–ª“≥–æ–∏ –º–æ",
        "btn_track": "üîç –ü–∞–π–≥–∏—Ä”£",
        "btn_calc": "üì¶ “≤–∏—Å–æ–±–∏ “≥–∞“∑–º",
        "btn_eta": "üöö –ú”Ø“≥–ª–∞—Ç–∏ —Ä–∞—Å–æ–Ω”£",
        "btn_about": "‚ÑπÔ∏è –î–∞—Ä –±–æ—Ä–∞–∏ –º–æ",
        "btn_contact": "üìû –¢–∞–º–æ—Å",
        "btn_lang": "üåê –ó–∞–±–æ–Ω",
        "btn_admin": "üõ† –ê–¥–º–∏–Ω",
        "btn_back": "‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç",
        "btn_by_code": "üî¢ –ê–∑ —Ä”Ø–∏ –∫–æ–¥",
        "btn_by_phone": "üìû –ê–∑ —Ä”Ø–∏ —Ç–µ–ª–µ—Ñ–æ–Ω",
        "btn_calc_again": "üîÅ “≤–∏—Å–æ–±–∏ –Ω–∞–≤",
        "btn_menu_back": "‚¨ÖÔ∏è –ë–∞ –º–µ–Ω—é",

        "lang_pick": "–ó–∞–±–æ–Ω—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
        "lang_saved": "–ó–∞–±–æ–Ω –Ω–∏–≥–æ“≥ –¥–æ—à—Ç–∞ —à—É–¥: {lang_name}",
        "channels_title": "–ö–∞–Ω–∞–ª“≥–æ–∏ –º–æ:",
        "track_how": "–ß”£ —Ç–∞–≤—Ä “∑—É—Å—Ç—É“∑”Ø –º–µ–∫—É–Ω–µ–¥?",
        "track_enter_code": "–†–∞–º–∑–∏ *—Ç—Ä–µ–∫*-—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:",
        "track_enter_phone": "–†–∞“õ–∞–º–∏ *—Ç–µ–ª–µ—Ñ–æ–Ω*-—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:",
        "search_none": "–Å—Ñ—Ç –Ω–∞—à—É–¥. –°–∞–Ω“∑–µ–¥ –≤–∞ –±–æ–∑ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥.",
        "search_again": "–ë–æ–∑ “∑—É—Å—Ç—É“∑”Ø –º–µ–∫—É–Ω–µ–¥? –£—Å—É–ª—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",

        "about_text": (
            "üåè **–î–∞—Ä –±–æ—Ä–∞–∏ Yasroikard Logistic**\n\n"
            "üè¢ **–°—É—Ä–æ“ì–∞–∏ –æ—Ñ–∏—Å:**\n"
            "–®–∞“≥—Ä–∏ –ô–∏–≤—É, –∫”Ø—á. “∂—è–Ω–¥—É–Ω, –º–∞“≥. –í–∞–π –°–∏–Ω –ß—É–Ω,\n"
            "–ë–∏–Ω–æ–∏ 44 / “ö–∏—Å–º–∏ 1, —É—Ç–æ“õ B301, –í–∏–ª. “∂‡•á‡§ú—è–Ω, –ß–∏–Ω\n\n"
            "üë§ **–ê–¥–º–∏–Ω“≥–æ:** Yasroikard –≤–∞ “∂–∞–ª–∏–ª–æ–≤ “ö–∏—ë–º–∏–¥–¥–∏–Ω\n\n"
            "üíº **–ú–æ –∫–∏—Å—Ç–µ–º:** –•–∞—Ä–∏–¥–æ—Ä–æ–Ω–∏ –∫–∞—Å–±”£ –¥–∞—Ä –ß–∏–Ω. –î–∞—Ä –ø–∞–π–¥–æ –∫–∞—Ä–¥–∞–Ω–∏ –º–æ–ª, —Å–∞–Ω“∑–∏—à–∏ —Å–∏—Ñ–∞—Ç –≤–∞ —Ç–∞—Ä“∑—É–º–æ–Ω”£ –±–∞ —à—É–º–æ –∫”Ø–º–∞–∫ –º–µ—Ä–∞—Å–æ–Ω–µ–º ‚Äî –∑—É–¥, –±–µ—Ö–∞—Ç–∞—Ä –≤–∞ –º—É–∞—Å—Å–∏—Ä.\n\n"
            "üõí **–•–∏–∑–º–∞—Ç“≥–æ:**\n"
            "‚Ä¢ –•–∞—Ä–∏–¥ –±–∞—Ä–æ–∏ Wildberries, Ozon –≤–∞ “ì.\n"
            "‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è —Ç–∞–Ω“≥–æ 5%\n"
            "‚Ä¢ –ù–∞–∑–æ—Ä–∞—Ç–∏ –º—É–æ–º–∏–ª–∞ –∞–∑ “∑—É—Å—Ç—É“∑”Ø —Ç–æ —Ä–∞—Å–æ–Ω–∏–¥–∞–Ω\n\n"
            "üö¢ **–†–∞—Å–æ–Ω–∏–¥–∞–Ω:**\n"
            "‚Ä¢ –¢–æ“∑–∏–∫–∏—Å—Ç–æ–Ω: 18‚Äì26 —Ä”Ø–∑\n"
            "‚Ä¢ –†—É—Å–∏—è: 13‚Äì18 —Ä”Ø–∑\n"
            "‚Ä¢ –ê–≤—Ä—É–ø–æ –≤–∞ –ò–ú–ê: –±–æ –∞–¥–º–∏–Ω —Ä–∞–≤—à–∞–Ω –∫—É–Ω–µ–¥\n\n"
            "üí∞ **–¢–∞—Ä–∏—Ñ“≥–æ:** –∞–∑ $0.5/–∫–≥ –≤–∞ –∞–∑ $190/–º¬≥\n\n"
            "üåç –ú–∏–∑–æ“∑–æ–Ω –∞–∑ —Ç–∞–º–æ–º–∏ “∑–∞“≥–æ–Ω.\n\n"
            "‚ú® –ë–æ –º–æ –æ“ì–æ–∑ –∫—É–Ω–µ–¥!"
        ),


        # Warehouse (TJ)
        "btn_warehouse": "üè≠ –ù–∏—à–æ–Ω–∏–∏ –∞–Ω–±–æ—Ä“≥–æ",

        "warehouse_title_multi": "üè≠ –ù–∏—à–æ–Ω–∏–∏ –∞–Ω–±–æ—Ä“≥–æ",
        "warehouse_tj_label": "–¢–æ“∑–∏–∫–∏—Å—Ç–æ–Ω",
        "warehouse_ru_label": "–†—É—Å–∏—è",

        "warehouse_tj_address": (
            "Êî∂Ë¥ß‰∫∫ÔºöYASCARGO\n"
            "ÁîµËØùÔºö13661799136\n"
            "ËØ¶ÁªÜÂú∞ÂùÄÔºöÊµôÊ±üÁúÅ ÈáëÂçéÂ∏Ç ‰πâ‰πåÂ∏ÇÁ¶èÁî∞Áâ©ÊµÅÂõ≠A8-165Âè∑ (–Ω–æ–º–µ—Ä–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ —Ö–¥—Ç–æ–Ω)"
        ),
        "warehouse_ru_address": (
            "Êî∂Ë¥ß‰∫∫ÔºöM9613-—á–æ—Ä —Ä–∞–∫–∞–º–∏ –æ—Ö–∏—Ä–∏ –Ω–æ–º–µ—Ä\n"
            "ÁîµËØùÔºö15734838888\n"
            "ËØ¶ÁªÜÂú∞ÂùÄÔºöÊµôÊ±üÁúÅÈáëÂçéÂ∏Ç‰πâ‰πåÂ∏Ç Á¶èÁî∞Â∑•‰∏öÂå∫Ê∂åÈáëÂ§ßÈÅìB9Âè∑Èô¢ÂÜÖ9399Â∫ìÊàøM9613-—á–æ—Ä —Ä–∞–∫–∞–º–∏ –æ—Ö–∏—Ä–∏ –Ω–æ–º–µ—Ä"
        ),

        "warehouse_text_multi": (
            "*{title}*\n\n"
            "üì¶ *{tj_label}*\n"
            "```\n{tj_addr}\n```\n"
            "üì¶ *{ru_label}*\n"
            "```\n{ru_addr}\n```\n"
            "üìå –ù–∏—à–æ–Ω–∏—Ä–æ –∞–∑ –±–æ–ª–æ –Ω—É—Å—Ö–∞ –∫—É–Ω–µ–¥."
        ),


        "delivery_text": (
            "üöö *–ú”Ø“≥–ª–∞—Ç–∏ —Ä–∞—Å–æ–Ω”£*\n\n"
            "üìç *–¢–æ“∑–∏–∫–∏—Å—Ç–æ–Ω:* 18‚Äì26 —Ä”Ø–∑\n"
            "üìç *–†—É—Å–∏—è:* 13‚Äì18 —Ä”Ø–∑\n"
            "üìç *–ê–≤—Ä—É–ø–æ –≤–∞ –ò–ú–ê:* –±–æ –∞–¥–º–∏–Ω —Å–∞–Ω“∑–µ–¥\n\n"
            "üè¢ *–°—É—Ä–æ“ì–∞–∏ –º–æ:*\n"
            "–ß–∏–Ω, –≤–∏–ª–æ—è—Ç–∏ –ß–∂—ç—Ü–∑—è–Ω, —à–∞“≥—Ä–∏ –ò—É,\n"
            "–∫”Ø—á–∞–∏ –¶–∑—è–Ω–î—É–Ω, –Ω–æ“≥–∏—è–∏ –£–ê–π –°–∏–Ω—å –¶—É–Ω—å,\n"
            "—Ö–æ–Ω–∞ 44  –±–ª–æ–∫ 1, —É—Ç–æ“õ–∏ B301\n\n"
            "üí¨ –ë–∞—Ä–æ–∏ –¥–∏–≥–∞—Ä –∫–∏—à–≤–∞—Ä“≥–æ –±–æ –∞–¥–º–∏–Ω —Ç–∞–º–æ—Å –≥–∏—Ä–µ–¥: @mg19981 —ë @Yasin\\_direct"
        ),

        "contact_text": (
            "üìû **–¢–∞–º–æ—Å**\n\n"
            "–ê–¥–º–∏–Ω“≥–æ: @mg19981 ‚Ä¢ @Yasin\\_direct\n\n"
            "üè¢ **–°—É—Ä–æ“ì–∞–∏ –æ—Ñ–∏—Å:**\n"
            "–®–∞“≥—Ä–∏ –ô–∏–≤—É, –∫”Ø—á. “∂—è–Ω–¥—É–Ω, –º–∞“≥. –í–∞–π –°–∏–Ω –ß—É–Ω,\n"
            "–ë–∏–Ω–æ–∏ 44  “ö–∏—Å–º–∏ 1, —É—Ç–æ“õ B301, –í–∏–ª. “∂–µ–∂—è–Ω, –ß–∏–Ω"
        ),

        "calc_intro": "üì¶ “≤–∏—Å–æ–±–∏ “≥–∞“∑–º (–º¬≥).\n–ê–≤–≤–∞–ª –≤–æ“≥–∏–¥“≥–æ—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
        "calc_enter_h_m": "–ë–∞–ª–∞–Ω–¥–∏—Ä–æ *–¥–∞—Ä –º–µ—Ç—Ä* –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, 1.2):",
        "calc_enter_h_cm": "–ë–∞–ª–∞–Ω–¥–∏—Ä–æ *–¥–∞—Ä —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä* –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, 120):",
        "calc_enter_w_unit": "–•—É–±. –ê–∫–Ω—É–Ω *–±–∞—Ä*-—Ä–æ –¥–∞—Ä {unit_phrase} –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:",
        "calc_enter_l_unit": "–ê—ä–ª–æ. –ù–∏“≥–æ—è—Ç *–¥–∞—Ä–æ–∑”£*-—Ä–æ –¥–∞—Ä {unit_phrase} –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:",
        "calc_invalid_value_unit": "“ö–∏–º–∞—Ç–∏ –Ω–æ–¥—É—Ä—É—Å—Ç. {dimension}-—Ä–æ –¥–∞—Ä {unit} –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.",
        "calc_result": "üì¶ “≤–∞“∑–º: *{volume:.3f} –º¬≥*",
        "unit_phrase_m": "–º–µ—Ç—Ä“≥–æ",
        "unit_phrase_cm": "—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä“≥–æ",
        "unit_m": "–º",
        "unit_cm": "—Å–º",
        "dim_height": "–±–∞–ª–∞–Ω–¥”£",
        "dim_width": "–±–∞—Ä",
        "dim_length": "–¥–∞—Ä–æ–∑”£",
    },
}
LANG_NAMES = {"ru": "–†—É—Å—Å–∫–∏–π", "en": "English", "tj": "–¢–æ“∑–∏–∫”£"}

USER_LANG_CACHE: dict[int, str] = {}
def get_lang(user_id: int) -> str:
    lang = USER_LANG_CACHE.get(user_id)
    if lang:
        return lang
    try:
        r = supabase.table("users").select("language").eq("id", user_id).limit(1).execute()
        lang = (r.data or [{}])[0].get("language") or "ru"
    except Exception:
        lang = "ru"
    # Safety: normalize bad legacy values
    if lang not in LANG:
        lang = "ru"
    USER_LANG_CACHE[user_id] = lang
    return lang

def set_lang(user_id: int, lang: str):
    USER_LANG_CACHE[user_id] = lang
    try:
        supabase.table("users").update({"language": lang}).eq("id", user_id).execute()
    except Exception as e:
        print("set_lang error:", e)

def t(user_id: int, key: str, **kwargs) -> str:
    lang = get_lang(user_id)
    base = LANG.get(lang, LANG["ru"])
    txt = base.get(key, LANG["ru"].get(key, key))
    if kwargs:
        txt = txt.format(**kwargs)
    return txt

# Base states
ADMIN_FLOW_STATE: dict[int, str | None] = {}
ADMIN_NEW_SHIPMENT: dict[int, dict] = {}
USER_TRACK_STATE: dict[int, bool] = {}
USER_TRACK_MODE: dict[int, str] = {}
ADMIN_STATUS_STATE: dict[int, str | None] = {}
ADMIN_STATUS_TARGET: dict[int, str] = {}
USER_REQ_STATE: dict[int, str | None] = {}
USER_REQ_DATA: dict[int, dict] = {}
ADMIN_REQ_CONTEXT: dict[int, int | None] = {}
PAGE_SIZE = 10
ADMIN_LIST_PAGE: dict[int, int] = {}
CALC_STATE: dict[int, str | None] = {}
CALC_DATA: dict[int, dict] = {}
# Benefit flow (admin)
BEN_STATE: dict[int, str | None] = {}   # "whatsapp"|"ordered"|"paid"|"real_cost"|"user_paid"|None
BEN_DATA: dict[int, dict] = {}          # temp: {"whatsapp": str, "ordered": bool, "paid": bool, "real_cost": float, "user_paid": float}
# Benefits list paging
BEN_PAGE_SIZE = 10
ADMIN_BEN_PAGE: dict[int, int] = {}  # admin_user_id -> current page (1-based)

STATUS_OPTIONS = {"in_transit": "–í –ø—É—Ç–∏", "arrived": "–ü—Ä–∏–±—ã–ª–æ", "warehouse": "–ù–∞ —Å–∫–ª–∞–¥–µ"}
PHONE_RE = re.compile(r"^\+?\d{7,15}$")
def normalize_phone(p: str) -> str:
    p = p.strip().replace(" ", "").replace("-", "")
    if p.startswith("+"):
        return "+" + re.sub(r"\D", "", p)
    return re.sub(r"\D", "", p)
def is_phone(text: str) -> bool:
    t_ = text.strip().replace(" ", "").replace("-", "")
    return t_.startswith("+") or t_.isdigit()






############################################################################
############################################################################

# === Part 2: keyboards + calculator helpers ===
def main_menu_kb(lang_code: str) -> InlineKeyboardMarkup:
    L = LANG.get(lang_code, LANG["ru"])
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=L["btn_channels"], callback_data="menu:channels"),
            InlineKeyboardButton(text=L["btn_track"], callback_data="menu:track"),
        ],
        [
            InlineKeyboardButton(text=L["btn_calc"], callback_data="menu:calc"),
            InlineKeyboardButton(text=L["btn_eta"], callback_data="menu:delivery"),
        ],
        [
            InlineKeyboardButton(text=L["btn_about"], callback_data="menu:about"),
            InlineKeyboardButton(text=L["btn_contact"], callback_data="menu:contact"),
        ],
        [
            InlineKeyboardButton(text=L["btn_warehouse"], callback_data="menu:warehouse"),
        ],

        [
            InlineKeyboardButton(text=L["btn_lang"], callback_data="menu:lang"),
            InlineKeyboardButton(text=L["btn_admin"], callback_data="menu:admin"),
        ],
    ])

def channels_kb(lang_code: str) -> InlineKeyboardMarkup:
    L = LANG.get(lang_code, LANG["ru"])
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëó –û–¥–µ–∂–¥–∞", url="https://t.me/yasroikard_gr")],
        [InlineKeyboardButton(text="üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", url="https://t.me/yasroikard_elektronika")],
        [InlineKeyboardButton(text="üï∞ –ß–∞—Å—ã –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã", url="https://t.me/russiamanwatchs")],
        [InlineKeyboardButton(text=L["btn_back"], callback_data="menu:back")]
    ])

def admin_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="admin:add")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ (—Ç–µ–ª/—Ç—Ä–µ–∫)", callback_data="admin:search")],
        [InlineKeyboardButton(text="üìÑ –í—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="admin:list")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="admin:status")],
        [InlineKeyboardButton(text="üìù –ó–∞—è–≤–∫–∏ (–ø–æ–ª—å–∑.)", callback_data="admin:reqs")],
        [InlineKeyboardButton(text="üíπ Benefit (—É—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏)", callback_data="admin:benefit")],
        [InlineKeyboardButton(text="üìä Benefits (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)", callback_data="admin:benefits")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")],
    ])

def track_choice_kb(lang_code: str) -> InlineKeyboardMarkup:
    L = LANG.get(lang_code, LANG["ru"])
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=L["btn_by_code"], callback_data="track:by_code"),
            InlineKeyboardButton(text=L["btn_by_phone"], callback_data="track:by_phone"),
        ],
        [InlineKeyboardButton(text=L["btn_back"], callback_data="menu:back")]
    ])

def ben_list_nav_kb(page: int, total_pages: int) -> InlineKeyboardMarkup:
    row = []
    if page > 1:
        row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data="benlist:prev"))
    if page < total_pages:
        row.append(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥.", callback_data="benlist:next"))
    if not row:
        row = [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:benefits")]
    return InlineKeyboardMarkup(inline_keyboard=[
        row,
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:admin")],
    ])

def status_choice_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üöö –í –ø—É—Ç–∏", callback_data="status:set:in_transit"),
            InlineKeyboardButton(text="üõ¨ –ü—Ä–∏–±—ã–ª–æ", callback_data="status:set:arrived"),
        ],
        [
            InlineKeyboardButton(text="üè∑ –ù–∞ —Å–∫–ª–∞–¥–µ", callback_data="status:set:warehouse"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="status:cancel"),
        ],
    ])

def phone_code_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="+992", callback_data="req:code:+992"),
            InlineKeyboardButton(text="+7", callback_data="req:code:+7"),
            InlineKeyboardButton(text="+1", callback_data="req:code:+1"),
            InlineKeyboardButton(text="+44", callback_data="req:code:+44"),
        ],
        [InlineKeyboardButton(text="‚úèÔ∏è –°–≤–æ–π –∫–æ–¥", callback_data="req:code:custom")],
    ])

def country_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="Tajikistan", callback_data="req:country:Tajikistan"),
            InlineKeyboardButton(text="Russia", callback_data="req:country:Russia"),
        ],
        [
            InlineKeyboardButton(text="Kazakhstan", callback_data="req:country:Kazakhstan"),
            InlineKeyboardButton(text="USA", callback_data="req:country:USA"),
        ],
        [
            InlineKeyboardButton(text="EU", callback_data="req:country:EU"),
            InlineKeyboardButton(text="‚úèÔ∏è –î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞", callback_data="req:country:custom"),
        ],
    ])

def request_review_kb(req_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"req:approve:{req_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"req:reject:{req_id}"),
        ],
        [InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞", callback_data="req:next")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:admin")],
    ])

def lang_kb(lang_code: str) -> InlineKeyboardMarkup:
    L = LANG.get(lang_code, LANG["ru"])
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang:set:ru"),
            InlineKeyboardButton(text="üá¨üáß English", callback_data="lang:set:en"),
            InlineKeyboardButton(text="üáπüáØ –¢–æ“∑–∏–∫”£", callback_data="lang:set:tj"),
        ],
        [InlineKeyboardButton(text=L["btn_back"], callback_data="menu:back")]
    ])

def yes_no_kb(prefix: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"{prefix}:yes"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"{prefix}:no"),
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="ben:cancel")],
    ])

def benefit_menu_btn_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="menu:admin")],
    ])

# Calculator helpers (localized prompts)
def calc_unit_kb(lang_code: str) -> InlineKeyboardMarkup:
    L = LANG.get(lang_code, LANG["ru"])
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ú–µ—Ç—Ä—ã (–º)", callback_data="calc:unit:m"),
            InlineKeyboardButton(text="–°–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã (—Å–º)", callback_data="calc:unit:cm"),
        ],
        [InlineKeyboardButton(text=L["btn_back"], callback_data="menu:back")],
    ])

def calc_again_kb(lang_code: str) -> InlineKeyboardMarkup:
    L = LANG.get(lang_code, LANG["ru"])
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=L["btn_calc_again"], callback_data="menu:calc")],
        [InlineKeyboardButton(text=L["btn_menu_back"], callback_data="menu:back")],
    ])

def _parse_pos_float(s: str) -> float | None:
    try:
        s = s.replace(",", ".").strip()
        v = float(s)
        return v if v > 0 else None
    except:
        return None



###############################################################################
###############################################################################



# === Part 3: DB helpers (search/save/list) ===
def format_shipment_row(row: dict) -> str:
    parts = [
        f"–¢—Ä–µ–∫: {row.get('tracking_code')}",
        f"–¢–µ–ª: {row.get('phone') or '‚Äî'}",
        f"–°—Ç–∞—Ç—É—Å: {row.get('status') or '‚Äî'}",
    ]
    if row.get("description"):
        parts.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {row['description']}")
    return "\n".join(parts)

def format_request_row(r: dict) -> str:
    return (
        f"–ó–∞—è–≤–∫–∞ #{r.get('id')}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {r.get('user_id')}\n"
        f"–¢—Ä–µ–∫: {r.get('tracking_code')}\n"
        f"–¢–µ–ª: {r.get('phone')}\n"
        f"–°—Ç—Ä–∞–Ω–∞: {r.get('country')}\n"
        f"–°—Ç–∞—Ç—É—Å: {r.get('status')}"
    )

async def find_shipments(query: str, mode: str | None = None) -> list[dict]:
    q = query.strip()
    try:
        if mode == "phone":
            res = supabase.table("shipments").select("*").eq("phone", normalize_phone(q)).order("created_at", desc=True).limit(20).execute()
        elif mode == "code":
            res = supabase.table("shipments").select("*").eq("tracking_code", q).limit(5).execute()
        else:
            if is_phone(q):
                res = supabase.table("shipments").select("*").eq("phone", normalize_phone(q)).order("created_at", desc=True).limit(20).execute()
            else:
                res = supabase.table("shipments").select("*").eq("tracking_code", q).limit(5).execute()
        return res.data or []
    except Exception as e:
        print("Search error:", e)
        return []

async def save_shipment_to_db(data: dict) -> tuple[bool, str]:
    tracking = data.get("tracking_code")
    phone = data.get("phone")
    description = data.get("description")
    try:
        dup = supabase_admin.table("shipments").select("id").eq("tracking_code", tracking).limit(1).execute()
        if dup.data:
            return False, "‚ùó –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º —Ç—Ä–µ–∫-–∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞: {e}"
    try:
        ins = supabase_admin.table("shipments").insert({
            "tracking_code": tracking, "phone": phone, "description": description,
            "status": "–í –ø—É—Ç–∏", "image_url": None,
        }).execute()
        return (True, "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.") if ins.data else (False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}"

async def get_next_pending_request() -> dict | None:
    try:
        res = supabase_admin.table("shipment_requests").select("*").eq("status", "pending").order("created_at", desc=False).limit(1).execute()
        return (res.data or [None])[0]
    except Exception as e:
        print("Fetch pending request error:", e)
        return None

# ---------- Benefits (profit) helpers ----------
async def save_benefit_row(admin_id: int, data: dict) -> tuple[bool, str]:
    """
    Expects data = {
      "whatsapp": str, "ordered": bool, "paid": bool,
      "real_cost": float, "user_paid": float
    }
    """
    try:
        # Profit = user_paid - real_cost
        benefit = float(data["user_paid"]) - float(data["real_cost"])
        supabase_admin.table("order_benefits").insert({
            "tg_admin_id": admin_id,
            "whatsapp": data["whatsapp"],
            "ordered": data["ordered"],
            "paid": data["paid"],
            "real_cost": data["real_cost"],
            "user_paid": data["user_paid"],
            "benefit": benefit,
        }).execute()
        return True, f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ü—Ä–∏–±—ã–ª—å: {benefit:.2f}."
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}"

# Pretty formatting (HTML monospace table)
def _fmt_money(x) -> str:
    try:
        # 12 345.67 style
        return f"{float(x):,.2f}".replace(",", " ")
    except:
        return "0.00"

def _pad(text: str, width: int) -> str:
    t = str(text or "")
    return t[:width].ljust(width)

def format_benefit_row_line(r: dict) -> str:
    wa = r.get("whatsapp") or "‚Äî"
    paid = "–î–∞" if r.get("paid") else "–ù–µ—Ç"
    rc  = _fmt_money(r.get("real_cost") or 0)
    up  = _fmt_money(r.get("user_paid") or 0)
    bf  = _fmt_money(r.get("benefit") or 0)
    dt  = (r.get("created_at") or "")[:19]
    return (
        f"{_pad(wa, 17)}  "
        f"{_pad(paid, 3)}  "
        f"{_pad(rc, 10)}  "
        f"{_pad(up, 10)}  "
        f"{_pad(bf, 10)}  "
        f"{_pad(dt, 19)}"
    )

async def fetch_benefits_page(page: int, page_size: int = BEN_PAGE_SIZE) -> tuple[list[dict], int]:
    if page < 1:
        page = 1
    start = (page - 1) * page_size
    end = start + page_size - 1
    res = supabase_admin.table("order_benefits") \
        .select("id, whatsapp, paid, real_cost, user_paid, benefit, created_at", count="exact") \
        .order("created_at", desc=True).range(start, end).execute()
    rows = res.data or []
    total = res.count or 0
    return rows, total

async def fetch_benefits_totals() -> tuple[float, float, float]:
    try:
        res = supabase_admin.table("order_benefits").select("real_cost, user_paid, benefit").execute()
        items = res.data or []
        rc = sum(float(x.get("real_cost") or 0) for x in items)
        up = sum(float(x.get("user_paid") or 0) for x in items)
        bf = sum(float(x.get("benefit") or 0) for x in items)
        return rc, up, bf
    except Exception as e:
        print("Totals fetch error:", e)
        return 0.0, 0.0, 0.0

async def render_benefits_page(page: int) -> tuple[str, InlineKeyboardMarkup]:
    rows, total = await fetch_benefits_page(page)
    rc_sum, up_sum, bf_sum = await fetch_benefits_totals()

    total_pages = max(1, math.ceil((total or 0) / BEN_PAGE_SIZE))
    header = (
        "üìä <b>–£—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏</b>\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages} ‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {total}\n"
    )

    table_header = (
        "<pre>"
        f"{_pad('WhatsApp', 17)}  "
        f"{_pad('–û–ø–ª', 3)}  "
        f"{_pad('–†–µ–∞–ª.', 10)}  "
        f"{_pad('–û–ø–ª–∞—á.', 10)}  "
        f"{_pad('–ü—Ä–æ—Ñ–∏—Ç', 10)}  "
        f"{_pad('–î–∞—Ç–∞', 19)}\n"
        f"{'-'*73}\n"
    )

    body = ""
    if total:
        body = "\n".join(format_benefit_row_line(r) for r in rows) + "\n"

    table_footer = (
        f"{'-'*73}\n"
        f"{_pad('–ò–¢–û–ì–û:', 22)}  "
        f"{_pad(_fmt_money(rc_sum), 10)}  "
        f"{_pad(_fmt_money(up_sum), 10)}  "
        f"{_pad(_fmt_money(bf_sum), 10)}\n"
        "</pre>"
    )

    text = header + table_header + body + table_footer
    kb = ben_list_nav_kb(page, total_pages)
    return text, kb

async def show_admin_benefits(msg, admin_id: int, page: int):
    ADMIN_BEN_PAGE[admin_id] = page
    text, kb = await render_benefits_page(page)
    await msg.edit_text(text, reply_markup=kb, parse_mode="HTML")

# ---------- Shipments list (unchanged) ----------
def format_ship_row_line(r: dict) -> str:
    tcode = r.get("tracking_code") or "‚Äî"
    s = r.get("status") or "‚Äî"
    p = r.get("phone") or "‚Äî"
    c = (r.get("created_at") or "")[:19]
    return f"{tcode} | {s} | {p} | {c}"

async def fetch_shipments_page(page: int, page_size: int = PAGE_SIZE) -> tuple[list[dict], int]:
    if page < 1:
        page = 1
    start = (page - 1) * page_size
    end = start + page_size - 1
    res = supabase_admin.table("shipments").select("*", count="exact").order("created_at", desc=True).range(start, end).execute()
    return (res.data or []), (res.count or 0)

def list_nav_kb(page: int, total_pages: int) -> InlineKeyboardMarkup:
    rows = []
    row = []
    if page > 1:
        row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data="list:prev"))
    if page < total_pages:
        row.append(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥.", callback_data="list:next"))
    if not row:
        row = [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:list")]
    rows.append(row)
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:admin")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

async def render_shipments_page(page: int) -> tuple[str, InlineKeyboardMarkup]:
    rows, total = await fetch_shipments_page(page)
    if total == 0:
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:admin")]])
        return "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π.", kb
    total_pages = max(1, math.ceil(total / PAGE_SIZE))
    header = f"üìÑ –í—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}\n–ü–æ–∫–∞–∑–∞–Ω–æ: {len(rows)} –∏–∑ {total}"
    lines = [header, "```", "–¢—Ä–µ–∫ | –°—Ç–∞—Ç—É—Å | –¢–µ–ª–µ—Ñ–æ–Ω | –°–æ–∑–¥–∞–Ω–æ", "-" * 40]
    for r in rows:
        lines.append(format_ship_row_line(r))
    lines.append("```")
    return "\n".join(lines), list_nav_kb(page, total_pages)

async def show_admin_list(msg, admin_id: int, page: int):
    ADMIN_LIST_PAGE[admin_id] = page
    text, kb = await render_shipments_page(page)
    await msg.edit_text(text, reply_markup=kb, parse_mode="Markdown")




###############################################################################
###############################################################################


# === Part 4: callback handlers ===
@dp.message(CommandStart())
async def on_start(message: Message):
    user_row = {
        "id": message.from_user.id, "username": message.from_user.username,
        "phone": None, "role": "user", "language": "ru",
    }
    try:
        supabase.table("users").upsert(user_row, on_conflict="id").execute()
    except Exception as e:
        print("User upsert error:", e)
    uid = message.from_user.id
    await message.answer(t(uid, "welcome") + "\n" + t(uid, "menu_title"),
                         reply_markup=main_menu_kb(get_lang(uid)))

@dp.message(Command("menu"))
async def open_menu(message: Message):
    uid = message.from_user.id
    await message.answer(t(uid, "menu_title"), reply_markup=main_menu_kb(get_lang(uid)))

@dp.callback_query(F.data.startswith("menu:"))
async def handle_menu_callbacks(cb: CallbackQuery):
    key = cb.data.split(":", 1)[1]
    uid = cb.from_user.id
    lang = get_lang(uid)

    if key == "channels":
        await cb.message.edit_text(t(uid, "channels_title"), reply_markup=channels_kb(lang))
    elif key == "track":
        await cb.message.edit_text(t(uid, "track_how"), reply_markup=track_choice_kb(lang))
    elif key == "calc":
        CALC_STATE[uid] = "calc_unit"; CALC_DATA[uid] = {}
        await cb.message.edit_text(t(uid, "calc_intro"), reply_markup=calc_unit_kb(lang))
    elif key == "delivery":
        # FIX: use t() to avoid KeyError with legacy/nonstandard lang codes
        await cb.message.edit_text(t(uid, "delivery_text"), parse_mode="Markdown")
    elif key == "about":
        await cb.message.edit_text(t(uid, "about_text"), parse_mode="Markdown")
    elif key == "contact":
        await cb.message.edit_text(t(uid, "contact_text"), parse_mode="Markdown")
    elif key == "lang":
        await cb.message.edit_text(t(uid, "lang_pick"), reply_markup=lang_kb(lang))
    elif key == "warehouse":
        lang = get_lang(uid)
        L = LANG.get(lang, LANG["ru"])
        txt = L["warehouse_text_multi"].format(
            title=L["warehouse_title_multi"],
            tj_label=L["warehouse_tj_label"],
            ru_label=L["warehouse_ru_label"],
            tj_addr=L["warehouse_tj_address"],
            ru_addr=L["warehouse_ru_address"],
        )
        # code fences make it copy-friendly and avoid Markdown parse issues
        await cb.message.edit_text(txt, parse_mode="Markdown")

    elif key == "admin":
        if uid in ADMIN_IDS:
            await cb.message.edit_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=admin_menu_kb())
        else:
            await cb.message.edit_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –ø–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    elif key == "req":
        USER_REQ_STATE[uid] = "req_track"; USER_REQ_DATA[uid] = {}
        await cb.message.edit_text("üì• –ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n–í–≤–µ–¥–∏—Ç–µ *—Ç—Ä–µ–∫-–∫–æ–¥*:", parse_mode="Markdown")
    elif key == "back":
        await cb.message.edit_text(t(uid, "menu_title"), reply_markup=main_menu_kb(lang))
    await cb.answer()

# Admin: Benefit flow start
@dp.callback_query(F.data == "admin:benefit")
async def admin_benefit_start(cb: CallbackQuery):
    uid = cb.from_user.id
    if uid not in ADMIN_IDS:
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    BEN_STATE[uid] = "whatsapp"
    BEN_DATA[uid] = {}
    await cb.message.edit_text(
        "üíπ –£—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏.\n\n–í–≤–µ–¥–∏—Ç–µ *WhatsApp –∫–ª–∏–µ–Ω—Ç–∞* (–Ω–∞–ø—Ä–∏–º–µ—Ä, +992xxxxxxxxx –∏–ª–∏ 8xxxxxxxxx):",
        parse_mode="Markdown"
    )
    await cb.answer()

@dp.callback_query(F.data.startswith("ben:ordered:"))
async def ben_ordered_cb(cb: CallbackQuery):
    uid = cb.from_user.id
    if uid not in ADMIN_IDS or BEN_STATE.get(uid) != "ordered":
        await cb.answer(); return
    val = cb.data.split(":")[2]  # yes|no
    BEN_DATA.setdefault(uid, {})["ordered"] = (val == "yes")
    BEN_STATE[uid] = "paid"
    await cb.message.edit_text("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑?\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=yes_no_kb("ben:paid"))
    await cb.answer()

@dp.callback_query(F.data.startswith("ben:paid:"))
async def ben_paid_cb(cb: CallbackQuery):
    uid = cb.from_user.id
    if uid not in ADMIN_IDS or BEN_STATE.get(uid) != "paid":
        await cb.answer(); return
    val = cb.data.split(":")[2]  # yes|no
    BEN_DATA.setdefault(uid, {})["paid"] = (val == "yes")
    BEN_STATE[uid] = "real_cost"
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ *—Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞* (—á–∏—Å–ª–æ):", parse_mode="Markdown")
    await cb.answer()

@dp.callback_query(F.data == "ben:cancel")
async def ben_cancel(cb: CallbackQuery):
    uid = cb.from_user.id
    BEN_STATE[uid] = None
    BEN_DATA[uid] = {}
    await cb.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_kb())
    await cb.answer()

# Language set
@dp.callback_query(F.data.startswith("lang:set:"))
async def set_language(cb: CallbackQuery):
    uid = cb.from_user.id
    lang = cb.data.split(":")[2]
    if lang not in LANG:
        await cb.answer("Unsupported", show_alert=True); return
    set_lang(uid, lang)
    await cb.message.edit_text(
        t(uid, "lang_saved", lang_name=LANG_NAMES.get(lang, lang)) + "\n" + t(uid, "menu_title"),
        reply_markup=main_menu_kb(lang)
    )
    await cb.answer()

@dp.callback_query(F.data == "admin:benefits")
async def admin_benefits_start(cb: CallbackQuery):
    uid = cb.from_user.id
    if uid not in ADMIN_IDS:
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    await show_admin_benefits(cb.message, uid, page=1)
    await cb.answer()

@dp.callback_query(F.data == "benlist:prev")
async def ben_list_prev(cb: CallbackQuery):
    uid = cb.from_user.id
    if uid not in ADMIN_IDS:
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    current = max(2, ADMIN_BEN_PAGE.get(uid, 1))
    await show_admin_benefits(cb.message, uid, page=current - 1)
    await cb.answer()

@dp.callback_query(F.data == "benlist:next")
async def ben_list_next(cb: CallbackQuery):
    uid = cb.from_user.id
    if uid not in ADMIN_IDS:
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    current = max(1, ADMIN_BEN_PAGE.get(uid, 1))
    await show_admin_benefits(cb.message, uid, page=current + 1)
    await cb.answer()

# Track flow choice
@dp.callback_query(F.data == "track:by_code")
async def track_by_code(cb: CallbackQuery):
    USER_TRACK_STATE[cb.from_user.id] = True; USER_TRACK_MODE[cb.from_user.id] = "code"
    await cb.message.edit_text(t(cb.from_user.id, "track_enter_code"), parse_mode="Markdown"); await cb.answer()

@dp.callback_query(F.data == "track:by_phone")
async def track_by_phone(cb: CallbackQuery):
    USER_TRACK_STATE[cb.from_user.id] = True; USER_TRACK_MODE[cb.from_user.id] = "phone"
    await cb.message.edit_text(t(cb.from_user.id, "track_enter_phone"), parse_mode="Markdown"); await cb.answer()

# Calculator unit selection
@dp.callback_query(F.data == "calc:unit:m")
async def calc_unit_m(cb: CallbackQuery):
    u = cb.from_user.id; CALC_STATE[u] = "calc_h"; CALC_DATA.setdefault(u, {})["unit"] = "m"
    await cb.message.edit_text(t(u, "calc_enter_h_m"), parse_mode="Markdown"); await cb.answer()

@dp.callback_query(F.data == "calc:unit:cm")
async def calc_unit_cm(cb: CallbackQuery):
    u = cb.from_user.id; CALC_STATE[u] = "calc_h"; CALC_DATA.setdefault(u, {})["unit"] = "cm"
    await cb.message.edit_text(t(u, "calc_enter_h_cm"), parse_mode="Markdown"); await cb.answer()

# Admin: search shortcut
@dp.callback_query(F.data == "admin:search")
async def admin_search_start(cb: CallbackQuery):
    if cb.from_user.id not in ADMIN_IDS:
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    await cb.message.edit_text("–ö–∞–∫ –∏—Å–∫–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?", reply_markup=track_choice_kb(get_lang(cb.from_user.id))); await cb.answer()

# Admin: add shipment
@dp.callback_query(F.data == "admin:add")
async def admin_add_start(cb: CallbackQuery):
    if cb.from_user.id not in ADMIN_IDS:
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    ADMIN_FLOW_STATE[cb.from_user.id] = "awaiting_tracking"; ADMIN_NEW_SHIPMENT[cb.from_user.id] = {}
    await cb.message.edit_text("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n–í–≤–µ–¥–∏—Ç–µ *—Ç—Ä–µ–∫-–∫–æ–¥* (–Ω–∞–ø—Ä–∏–º–µ—Ä, YA123456789):", parse_mode="Markdown")
    await cb.answer()

# Admin: change status
@dp.callback_query(F.data == "admin:status")
async def admin_status_start(cb: CallbackQuery):
    if cb.from_user.id not in ADMIN_IDS:
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    ADMIN_STATUS_STATE[cb.from_user.id] = "awaiting_status_tracking"; ADMIN_STATUS_TARGET[cb.from_user.id] = ""
    await cb.message.edit_text("‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.\n\n–í–≤–µ–¥–∏—Ç–µ *—Ç—Ä–µ–∫-–∫–æ–¥* –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", parse_mode="Markdown"); await cb.answer()

@dp.callback_query(F.data == "status:cancel")
async def status_cancel(cb: CallbackQuery):
    u = cb.from_user.id; ADMIN_STATUS_STATE[u] = None; ADMIN_STATUS_TARGET[u] = ""
    await cb.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_kb()); await cb.answer()

@dp.callback_query(F.data.startswith("status:set:"))
async def status_set(cb: CallbackQuery):
    if cb.from_user.id not in ADMIN_IDS:
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    tracking = ADMIN_STATUS_TARGET.get(cb.from_user.id)
    if not tracking:
        await cb.answer("–ù–µ –≤—ã–±—Ä–∞–Ω —Ç—Ä–µ–∫-–∫–æ–¥. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ ¬´‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å¬ª.", show_alert=True); return
    key = cb.data.split(":", 2)[2]; new_status = STATUS_OPTIONS.get(key)
    if not new_status:
        await cb.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å.", show_alert=True); return
    try:
        upd = supabase_admin.table("shipments").update({"status": new_status}).eq("tracking_code", tracking).execute()
        if upd.data:
            await cb.message.edit_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω.\n–¢—Ä–µ–∫: *{tracking}*\n–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: *{new_status}*", parse_mode="Markdown", reply_markup=admin_menu_kb())
        else:
            await cb.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–µ–∫-–∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=admin_menu_kb())
    except Exception as e:
        await cb.message.edit_text(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}", reply_markup=admin_menu_kb())
    ADMIN_STATUS_TARGET[cb.from_user.id] = ""; ADMIN_STATUS_STATE[cb.from_user.id] = None
    await cb.answer()

# Admin: requests review
@dp.callback_query(F.data == "admin:reqs")
async def admin_reqs(cb: CallbackQuery):
    if cb.from_user.id not in ADMIN_IDS:
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    req = await get_next_pending_request()
    if not req:
        await cb.message.edit_text("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫. üéâ", reply_markup=admin_menu_kb()); await cb.answer(); return
    ADMIN_REQ_CONTEXT[cb.from_user.id] = req["id"]
    await cb.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:\n\n" + format_request_row(req), reply_markup=request_review_kb(req["id"]))
    await cb.answer()

@dp.callback_query(F.data == "req:next")
async def req_next(cb: CallbackQuery):
    if cb.from_user.id not in ADMIN_IDS:
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    req = await get_next_pending_request()
    if not req:
        await cb.message.edit_text("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫. üéâ", reply_markup=admin_menu_kb()); await cb.answer(); return
    ADMIN_REQ_CONTEXT[cb.from_user.id] = req["id"]
    await cb.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:\n\n" + format_request_row(req), reply_markup=request_review_kb(req["id"]))
    await cb.answer()

@dp.callback_query(F.data.startswith("req:approve:"))
async def req_approve(cb: CallbackQuery):
    if cb.from_user.id not in ADMIN_IDS:
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    req_id = int(cb.data.split(":")[2])
    try:
        r = supabase_admin.table("shipment_requests").select("*").eq("id", req_id).limit(1).execute()
        req = (r.data or [None])[0]
        if not req or req.get("status") != "pending":
            await cb.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", reply_markup=admin_menu_kb()); await cb.answer(); return
    except Exception as e:
        await cb.message.edit_text(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–∫–∏: {e}", reply_markup=admin_menu_kb()); await cb.answer(); return
    try:
        supabase_admin.table("shipments").insert({
            "tracking_code": req["tracking_code"], "phone": req["phone"],
            "description": f"–°—Ç—Ä–∞–Ω–∞: {req['country']}", "status": "–í –ø—É—Ç–∏", "image_url": None,
        }).execute()
        supabase_admin.table("shipment_requests").update({"status": "approved"}).eq("id", req_id).execute()
    except Exception as e:
        await cb.message.edit_text(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}", reply_markup=admin_menu_kb()); await cb.answer(); return
    try:
        await bot.send_message(req["user_id"], f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n–¢—Ä–µ–∫: {req['tracking_code']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {req['phone']}")
    except Exception:
        pass
    await cb.message.edit_text("–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è. ‚úÖ", reply_markup=admin_menu_kb()); await cb.answer()

@dp.callback_query(F.data.startswith("req:reject:"))
async def req_reject(cb: CallbackQuery):
    if cb.from_user.id not in ADMIN_IDS:
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    req_id = int(cb.data.split(":")[2])
    try:
        supabase_admin.table("shipment_requests").update({"status": "rejected"}).eq("id", req_id).execute()
    except Exception as e:
        await cb.message.edit_text(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {e}", reply_markup=admin_menu_kb()); await cb.answer(); return
    try:
        r = supabase_admin.table("shipment_requests").select("user_id").eq("id", req_id).limit(1).execute()
        req_user = (r.data or [None])[0]
        if req_user:
            await bot.send_message(req_user["user_id"], "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception:
        pass
    await cb.message.edit_text("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. ‚ùå", reply_markup=admin_menu_kb()); await cb.answer()

# Admin list/pagination
@dp.callback_query(F.data == "admin:list")
async def admin_list_start(cb: CallbackQuery):
    if cb.from_user.id not in ADMIN_IDS:
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    await show_admin_list(cb.message, cb.from_user.id, page=1); await cb.answer()

@dp.callback_query(F.data == "list:prev")
async def admin_list_prev(cb: CallbackQuery):
    if cb.from_user.id not in ADMIN_IDS:
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    current = max(2, ADMIN_LIST_PAGE.get(cb.from_user.id, 1))
    await show_admin_list(cb.message, cb.from_user.id, page=current - 1); await cb.answer()

@dp.callback_query(F.data == "list:next")
async def admin_list_next(cb: CallbackQuery):
    if cb.from_user.id not in ADMIN_IDS:
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    current = max(1, ADMIN_LIST_PAGE.get(cb.from_user.id, 1))
    await show_admin_list(cb.message, cb.from_user.id, page=current + 1); await cb.answer()


##############################################################
##############################################################

# === Part 5: message router + runner ===
@dp.message()
async def message_router(message: Message):
    uid = message.from_user.id
    lang = get_lang(uid)

    # Admin add shipment ‚Äî step 1: tracking
    if uid in ADMIN_IDS and ADMIN_FLOW_STATE.get(uid) == "awaiting_tracking":
        tracking = (message.text or "").strip()
        if not tracking or len(tracking) < 5:
            await message.answer("–¢—Ä–µ–∫-–∫–æ–¥ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π."); return
        ADMIN_NEW_SHIPMENT[uid]["tracking_code"] = tracking
        ADMIN_FLOW_STATE[uid] = "awaiting_phone"
        await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* –∫–ª–∏–µ–Ω—Ç–∞:", parse_mode="Markdown")
        return

    # Step 2: phone
    if uid in ADMIN_IDS and ADMIN_FLOW_STATE.get(uid) == "awaiting_phone":
        phone_raw = (message.text or "").strip()
        phone = normalize_phone(phone_raw)
        if not PHONE_RE.match(phone):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞."); return
        ADMIN_NEW_SHIPMENT[uid]["phone"] = phone
        ADMIN_FLOW_STATE[uid] = "awaiting_description"
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ *–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ*:", parse_mode="Markdown")
        return

    # Step 3: description -> save
    if uid in ADMIN_IDS and ADMIN_FLOW_STATE.get(uid) == "awaiting_description":
        desc = (message.text or "").strip()
        if len(desc) < 3:
            await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ."); return
        ADMIN_NEW_SHIPMENT[uid]["description"] = desc
        ok, msg = await save_shipment_to_db(ADMIN_NEW_SHIPMENT[uid])
        ADMIN_FLOW_STATE[uid] = None; ADMIN_NEW_SHIPMENT[uid] = {}
        await message.answer(msg)
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_kb())
        return

    # Admin change status: ask tracking
    if uid in ADMIN_IDS and ADMIN_STATUS_STATE.get(uid) == "awaiting_status_tracking":
        tracking = (message.text or "").strip()
        if not tracking or len(tracking) < 5:
            await message.answer("–¢—Ä–µ–∫-–∫–æ–¥ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π."); return
        try:
            res = supabase_admin.table("shipments").select("id, tracking_code, status")\
                .eq("tracking_code", tracking).limit(1).execute()
            if not res.data:
                await message.answer("‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–æ."); return
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}"); return
        ADMIN_STATUS_TARGET[uid] = tracking
        ADMIN_STATUS_STATE[uid] = None
        await message.answer(
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {res.data[0].get('status') or '‚Äî'}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
            reply_markup=status_choice_kb()
        )
        return

    # User request flow
    if USER_REQ_STATE.get(uid) == "req_track":
        tracking = (message.text or "").strip()
        if not tracking or len(tracking) < 5:
            await message.answer("–¢—Ä–µ–∫-–∫–æ–¥ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π."); return
        USER_REQ_DATA.setdefault(uid, {})["tracking_code"] = tracking
        USER_REQ_STATE[uid] = "req_phone_code"
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã:", reply_markup=phone_code_kb())
        return

    if USER_REQ_STATE.get(uid) == "req_phone_code_custom":
        code = (message.text or "").strip()
        if not code.startswith("+") or not re.sub(r"\D", "", code):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥."); return
        USER_REQ_DATA.setdefault(uid, {})["phone_code"] = code
        USER_REQ_STATE[uid] = "req_phone_local"
        await message.answer(f"–ö–æ–¥ –≤—ã–±—Ä–∞–Ω: {code}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–µ–∑ –∫–æ–¥–∞:")
        return

    if USER_REQ_STATE.get(uid) == "req_phone_local":
        local = (message.text or "").strip().replace(" ", "").replace("-", "")
        code = USER_REQ_DATA[uid].get("phone_code", "")
        full = normalize_phone(code + local)
        if not PHONE_RE.match(full):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω."); return
        USER_REQ_DATA[uid]["phone"] = full
        USER_REQ_STATE[uid] = "req_country"
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=country_kb())
        return

    if USER_REQ_STATE.get(uid) == "req_country_custom":
        country = (message.text or "").strip()
        if len(country) < 2:
            await message.answer("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."); return
        USER_REQ_DATA[uid]["country"] = country
        try:
            supabase_admin.table("shipment_requests").insert({
                "user_id": uid,
                "tracking_code": USER_REQ_DATA[uid]["tracking_code"],
                "phone": USER_REQ_DATA[uid]["phone"],
                "country": USER_REQ_DATA[uid]["country"],
            }).execute()
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")
            USER_REQ_STATE[uid] = None; USER_REQ_DATA[uid] = {}; return
        USER_REQ_STATE[uid] = None; USER_REQ_DATA[uid] = {}
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        await message.answer(t(uid, "menu_title"), reply_markup=main_menu_kb(lang))
        return

    # Calculator: height
    if CALC_STATE.get(uid) == "calc_h":
        v = _parse_pos_float(message.text or "")
        if v is None:
            unit = LANG[lang]["unit_m"] if CALC_DATA.get(uid, {}).get("unit") == "m" else LANG[lang]["unit_cm"]
            await message.answer(t(uid, "calc_invalid_value_unit", dimension=t(uid, "dim_height"), unit=unit)); return
        CALC_DATA[uid]["h"] = v
        CALC_STATE[uid] = "calc_w"
        await message.answer(t(uid, "calc_enter_w_unit", unit_phrase=t(uid, f"unit_phrase_{CALC_DATA[uid]['unit']}")), parse_mode="Markdown")
        return

    # Calculator: width
    if CALC_STATE.get(uid) == "calc_w":
        v = _parse_pos_float(message.text or "")
        if v is None:
            unit = LANG[lang]["unit_m"] if CALC_DATA[uid]["unit"] == "m" else LANG[lang]["unit_cm"]
            await message.answer(t(uid, "calc_invalid_value_unit", dimension=t(uid, "dim_width"), unit=unit)); return
        CALC_DATA[uid]["w"] = v
        CALC_STATE[uid] = "calc_l"
        await message.answer(t(uid, "calc_enter_l_unit", unit_phrase=t(uid, f"unit_phrase_{CALC_DATA[uid]['unit']}")), parse_mode="Markdown")
        return

    # Calculator: length
    if CALC_STATE.get(uid) == "calc_l":
        v = _parse_pos_float(message.text or "")
        if v is None:
            unit = LANG[lang]["unit_m"] if CALC_DATA[uid]["unit"] == "m" else LANG[lang]["unit_cm"]
            await message.answer(t(uid, "calc_invalid_value_unit", dimension=t(uid, "dim_length"), unit=unit)); return
        CALC_DATA[uid]["l"] = v
        h, w, l_ = CALC_DATA[uid]["h"], CALC_DATA[uid]["w"], CALC_DATA[uid]["l"]
        if CALC_DATA[uid]["unit"] == "cm":
            h, w, l_ = h/100, w/100, l_/100
        volume = h * w * l_
        CALC_STATE[uid] = None; CALC_DATA[uid] = {}
        await message.answer(t(uid, "calc_result", volume=volume), parse_mode="Markdown",
                             reply_markup=calc_again_kb(lang))
        return

    # Admin benefit flow
    if uid in ADMIN_IDS and BEN_STATE.get(uid) == "whatsapp":
        wa = (message.text or "").strip()
        if not re.search(r"\d", wa):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç WhatsApp."); return
        BEN_DATA.setdefault(uid, {})["whatsapp"] = wa
        BEN_STATE[uid] = "ordered"
        await message.answer("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ñ–æ—Ä–º–∏–ª –∑–∞–∫–∞–∑?", reply_markup=yes_no_kb("ben:ordered"))
        return

    if uid in ADMIN_IDS and BEN_STATE.get(uid) == "real_cost":
        val = _parse_pos_float(message.text or "")
        if val is None:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ."); return
        BEN_DATA.setdefault(uid, {})["real_cost"] = float(val)
        BEN_STATE[uid] = "user_paid"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –æ–ø–ª–∞—Ç–∏–ª –ø–æ–∫—É–ø–∞—Ç–µ–ª—å:")
        return

    if uid in ADMIN_IDS and BEN_STATE.get(uid) == "user_paid":
        val = _parse_pos_float(message.text or "")
        if val is None:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ."); return
        BEN_DATA.setdefault(uid, {})["user_paid"] = float(val)
        ok, msg = await save_benefit_row(uid, BEN_DATA[uid])
        BEN_STATE[uid] = None; BEN_DATA[uid] = {}
        await message.answer(msg, reply_markup=benefit_menu_btn_kb())
        return

    # Tracking search flow
    if USER_TRACK_STATE.get(uid):
        query = (message.text or "").strip()
        if not query:
            await message.answer("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å."); return
        mode = USER_TRACK_MODE.get(uid)
        results = await find_shipments(query, mode)
        USER_TRACK_STATE[uid] = False; USER_TRACK_MODE[uid] = ""
        if not results:
            await message.answer(t(uid, "search_none"))
            await message.answer(t(uid, "search_again"), reply_markup=track_choice_kb(lang))
            return
        if len(results) == 1:
            await message.answer(format_shipment_row(results[0]))
        else:
            await message.answer("\n\n".join(format_shipment_row(r) for r in results))
        await message.answer(t(uid, "search_again"), reply_markup=track_choice_kb(lang))
        return

# Runner
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())



